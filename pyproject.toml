# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry_core>=1.0.0"]

[tool.poetry]
authors = ["TakashiAihara <takashi.aihara.0523@gmail.com>"]
description = "pyutils is wrapper python base class for usability."
homepage = "https://github.com/TakashiAihara/pyutils"
license = "MIT"
name = "pyutils"
readme = "README.md"
repository = "https://github.com/TakashiAihara/pyutils"
version = "0.1.0"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = [] #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
  #! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
]

[tool.poetry.dependencies]
importlib_metadata = {version = "^4.5.0", python = "<3.8"}
python = "^3.10"
python-dotenv = "^0.20.0"
pytz = "^2022.2.1"

[tool.poetry.dev-dependencies]
bandit = "^1.7.4"
black = {version = "^22.6", allow-prereleases = true}
coverage = "^6.4.4"
coverage-badge = "^1.1.0"
darglint = "^1.8.1"
isort = {extras = ["colors"], version = "^5.10.1"}
mypy = "^0.971"
mypy-extensions = "^0.4.3"
pre-commit = "^2.20.0"
pydocstyle = "^6.1.1"
pylint = "^2.14.5"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pytest-html = "^3.1.1"
pytest-mock = "^3.9.0"
pyupgrade = "^2.37.3"
safety = "^2.1.1"
tox = "^3.25.1"
autopep8 = "^1.7.0"
flake8 = "^5.0.4"

[tool.black]
# https://github.com/psf/black
color = true
line-length = 88
target-version = ["py310"]

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.isort]
# https://github.com/timothycrosley/isort/
line_length = 88
py_version = 310

color_output = true
include_trailing_comma = true
indent = 4
known_typing = [
  "typing",
  "types",
  "typing_extensions",
  "mypy",
  "mypy_extensions",
]
multi_line_output = 3
profile = "black"
sections = [
  "FUTURE",
  "TYPING",
  "STDLIB",
  "THIRDPARTY",
  "FIRSTPARTY",
  "LOCALFOLDER",
]

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
color_output = true
pretty = true
python_version = 3.10
show_traceback = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
doctest_optionflags = [
  "NUMBER",
  "NORMALIZE_WHITESPACE",
  "IGNORE_EXCEPTION_DETAIL",
]
norecursedirs = [
  "hooks",
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__",
]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

[tool.coverage.run]
source = ["tests"]

[coverage.paths]
source = "pyutils"

[coverage.run]
branch = true

[coverage.report]
fail_under = 50
show_missing = true
